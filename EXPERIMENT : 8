#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define MAX 100

char stack[MAX];
int top = -1;

// Function prototypes
void push(char);
char pop();
char peek();
int precedence(char);
int isOperator(char);
void infixToPostfix(char infix[], char postfix[]);

// Main function
int main() {
    char infix[MAX], postfix[MAX];
    printf("\nEnter an Infix Expression: ");
    gets(infix);

    infixToPostfix(infix, postfix);
    printf("\nPostfix Expression: %s\n", postfix);

    return 0;
}

// Push operation
void push(char ch) {
    if (top == MAX - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = ch;
}

// Pop operation
char pop() {
    if (top == -1)
        return '\0';
    else
        return stack[top--];
}

// Peek operation
char peek() {
    if (top == -1)
        return '\0';
    return stack[top];
}

// Check operator precedence
int precedence(char op) {
    switch (op) {
        case '^': return 3;
        case '*': 
        case '/': 
        case '%': return 2;
        case '+': 
        case '-': return 1;
        default: return 0;
    }
}

// Check if character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%' || ch == '^');
}

// Convert infix to postfix
void infixToPostfix(char infix[], char postfix[]) {
    int i, j = 0;
    char symbol, temp;

    for (i = 0; i < strlen(infix); i++) {
        symbol = infix[i];

        if (isalnum(symbol)) { // Operand
            postfix[j++] = symbol;
        }
        else if (symbol == '(') {
            push(symbol);
        }
        else if (symbol == ')') {
            while ((temp = pop()) != '(')
                postfix[j++] = temp;
        }
        else if (isOperator(symbol)) {
            while (top != -1 && precedence(peek()) >= precedence(symbol))
                postfix[j++] = pop();
            push(symbol);
        }
    }

    while (top != -1)
        postfix[j++] = pop();

    postfix[j] = '\0';
}
